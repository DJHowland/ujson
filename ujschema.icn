#
# ujschema - json schema validation.
#
# Author: Jafar Al-Gharaibeh
# Author: Derek Howland
#
# Date: March 2021
#

link basename
link options
link io
link json
link ximage

procedure usage()
    prog := basename(&progname)
    write("Usage: ", prog, " [options]\n")
    write(prog, " is a unicon utility for validating a json file given its schema")
    write("Options:")
    write("\t -f : json filename")
    write("\t -s : json schema file, default to <fname-noext>.schema.json")
    write("\t -h : show this help\n")
    exit(-1)
end

procedure main(args)
    local opts, jfname, sfname, ext
    opts := options(args, "hs:f:")

    if *opts = 0 then
       usage()

    # get the json file name, if it is not provided, error out.
    jfname :=  \opts["f"] | usage()

    # get the schema file
    if \opts["s"] then
       sfname :=  opts["s"]
    else { # default to <fname-noext>.schema.json
       ext :=  suffix(jfname) # split the name from the extension
       sfname := ext[1] || ".schema." || ext[2]
       }

    write("json file  : ", jfname)
    write("schema file: ", sfname)

    exists(jfname) | stop("file doesn't exist:", jfname)
    exists(sfname) | stop("file doesn't exist:", sfname)

    js_validate(jfname, sfname)
end

procedure my_json_error()
end

procedure js_validate(jfname, sfname)
   local json_date, json_schema
   json_data   := jtou(jfname , "f")
   json_schema := jtou(sfname , "s")
   

   write("\n")
   #write("json data dump: ")
   #write(ximage(json_data))
   dumpschema(json_schema)

   #write("\n")
   #write("json schema dump: ")
   #write(ximage(json_schema))
end






#every k := key(x) do
 #     		case k of {
  #    			"description": write(space, "type: ", k, "   value: ", x[k])
   #   			"minProperties": write(space, "type: ", k, "   value: ", x[k])
    #  			"maxProperties": write(space, "type: ", k, "   value: ", x[k])
     # 			"required": {
      #				y := x["required"]
    	#			every write(space, "   field: ", left(k := key(y), 20) , "    type:",
    	#			 left(image(y[k]), 20)) do
     	#				dumpschema(y[k])
      	#		}
      	#		"type": write(space, "type: ", k, "   value: ", x[k])
      	#		"enum": write(space, "type: ", k, "   value: ", x[k])
      	#		"cons": write(space, "type: ", k, "   value: ", x[k])
      	#		"properties": {
      	#			y := x["properties"]
    	#			every write(space, "   field: ", left(k := key(y), 20) , "    type:",
    	#			 left(image(y[k]["type"]), 20)) do
     	#				dumpschema(y[k])
      	#		}
      	#	}

procedure dumpschema(x)  
   local k, space := repl("   ", &level - 3)
   case x["type"] of {
      "object" :{
      	minp := x["minProperties"]
      	maxp := x["maxProperties"]
      	required := x["required"]
  	#write(space, " required: ", fullimage(required))
      	y := x["properties"]
    	every write(space, "   field: ", left(k := key(y), 20) , "    type:",
    		left(image(y[k]["type"]), 20)) do
     		dumpschema(y[k])
      	write("\n")
      }
      "array": {
      	y := x["items"]
      	write(space, "items type: ", left(image(y["type"]), 20))
      	every k := key(x) do
      		case k of {
      			#"description": write(space, "type: ", k, "   value: ", x[k])
      			"additionalItems": write(space, "type: ", k, "   value: ", x[k])
      			"minItems": write(space, "type: ", k, "   value: ", x[k])
      			"maxItems": write(space, "type: ", k, "   value: ", x[k])
      			"uniqueItems": write(space, "type: ", k, "   value: ", x[k])
      			"contains": write(space, "type: ", k, "   value: ", x[k])
      			#"type": write(space, "type: ", k, "   value: ", x[k])
      			"enum": write(space, "type: ", k, "   value: ", x[k])
      			"const": write(space, "type: ", k, "   value: ", x[k])
      		}
      	write("\n")
      }
      "number": {
      	every k := key(x) do
      		case k of {
      			#"description": write(space, "type: ", k, "   value: ", x[k])
      			"multipleOf": write(space, "type: ", k, "   value: ", x[k])
      			"maximum": write(space, "type: ", k, "   value: ", x[k])
      			"exclusiveMaximum": write(space, "type: ", k, "   value: ", x[k])
      			"minimum": write(space, "   items type:", left(image(y["type"]), 20))
      			"exclusiveMinimum": write(space, "type: ", k, "   value: ", x[k])
      			#"type": write(space, "type: ", k, "   value: ", x[k])
      			"enum": write(space, "type: ", k, "   value: ", x[k])
      			"const": write(space, "type: ", k, "   value: ", x[k])
      			"number": write(space, "type: ", k, "   value: ", x[k])
      		}
      	write("\n")
      }
      "string": {
      	every k := key(x) do
      		case k of {
      			#"description": write(space, "type: ", k, "   value: ", x[k])
      			"minLength": write(space, "type: ", k, "   value: ", x[k])
      			"maxLength": write(space, "type: ", k, "   value: ", x[k])
      			"pattern": write(space, "type: ", k, "   value: ", x[k])
      			#"type": write(space, "type: ", k, "   value: ", x[k])
      			"enum": write(space, "type: ", k, "   value: ", x[k])
      			"const": write(space, "type: ", k, "   value: ", x[k])
      			"string": write(space, "type: ", k, "   value: ", x[k])
      		}
  	write("\n")
      }
      "boolean": {
      	every k := key(x) do
      		case k of {
      			"allOf": write(space, "type: ", k, "   value: ", x[k])
      			"anyOf": write(space, "type: ", k, "   value: ", x[k])
			"oneOf": write(space, "type: ", k, "   value: ", x[k])
			"not": write(space, "type: ", k, "   value: ", x[k])
      			#"description": write(space, "type: ", k, "   value: ", x[k])
      			"uniqueItems": write(space, "type: ", k, "   value: ", x[k])
      			#"type": write(space, "type: ", k, "   value: ", x[k])
      			"enum": write(space, "type: ", k, "   value: ", x[k])
      			"const": write(space, "type: ", k, "   value: ", x[k])
      			"boolean": write(space, "type: ", k, "   value: ", x[k])
      		}
      	write("\n")
      }
      "integer": {
      	every k := key(x) do
      		case k of {
      			#"description": write(space, "type: ", k, "   value: ", x[k])
      			"multipleOf": write(space, "type: ", k, "   value: ", x[k])
      			"maximum": write(space, "type: ", k, "   value: ", x[k])
      			"exclusiveMaximum": write(space, "type: ", k, "   value: ", x[k])
      			"minimum": write(space, "type: ", k, "   value: ", x[k])
      			"exclusiveMinimum": write(space, "type: ", k, "   value: ", x[k])
      			#"type": write(space, "type: ", k, "   value: ", x[k])
      			"enum": write(space, "type: ", k, "   value: ", x[k])
      			"const": write(space, "type: ", k, "   value: ", x[k])
      			"integer": write(space, "type: ", k, "   value: ", x[k])
      		}
      	write("\n")
      }
      "null": {
      	every k := key(x) do
      		case k of {
      			#"description": write(space, "type: ", k, "   value: ", x[k])
      			#"type": write(space, "type: ", k, "   value: ", x[k])
      			"enum": write(space, "type: ", k, "   value: ", x[k])
      			"const": write(space, "type: ", k, "   value: ", x[k])
      			"null": write(space, "type: ", k, "   value: ", x[k])
      		}
      	write("\n")
      }
      default: {write("\n")}
   }
end
